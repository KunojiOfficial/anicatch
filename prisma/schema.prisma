generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider      = "postgresql"
  url           = env("DATABASE_URL")
  // directUrl     = env("DIRECT_URL")
}

model Status {
  id            Int               @unique @default(autoincrement())
  delay         Int               @default(1000)
  text          String
}

model User {
  id            Int               @unique @id @default(autoincrement())
  discordId     String            @unique
  roleId        Int               @default(1)

  coins         Int               @default(0)
  gems          Int               @default(0)

  username      String?
  status        String            @default("tutorial")
  
  encounters    Int               @default(15)
  
  config        Config?
  role          Role              @relation(fields: [roleId], references: [id])
  items         Inventory[]
  cards         CardInstance[]
  vouchers      Voucher[]

  logs          Log[]

  lastReset     DateTime          @default(now())
  nextNotify    DateTime?

  createdAt     DateTime          @default(now())
}

model Role {
  id            Int               @unique @id @default(autoincrement())
  name          String
  emoji         String?

  maxEncounters Int
  rechargeTime  Int

  users         User[]
}

model Config {
  isMobile      Boolean           @default(false)
  locale        String            @default("en-US")
  
  userId        Int               @unique
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id            Int               @unique @id @default(autoincrement())
  userId        Int      
  action        String
  description   String?
  createdAt     DateTime          @default(now())

  user          User              @relation(fields: [userId], references: [id])
}

model Character {
  id            Int               @unique @id @default(autoincrement())
  mal           Int?
  name          String
  nicknames     String[] 
  series        Int?

  cards         CardCatalog[]
}

enum Class {
  TANK
  ATTACKER
  CASTER
  BALANCED  
}

model CardCatalog {
  id            Int               @unique @id @default(autoincrement()) 
  type          Int
  count         Int               @default(0)
  
  characterId   Int

  class         Class
  vit           Int          
  pow           Int
  def           Int
  agi           Int
  spi           Int
  res           Int

  character     Character         @relation(fields: [characterId], references: [id])
  instances     CardInstance[]
}

enum CardStatus {
  WILD
  IDLE
  FIGHT
  FLED
  WILD_FIGHT
  DEAD
}

model CardInstance {
  id            Int               @unique @id @default(autoincrement())
  userId        Int
  cardId        Int

  status        CardStatus        @default(WILD)
  favorite      Boolean           @default(false)
  team          Int               @default(0)

  rarity        Int
  print         Int               @default(0)
  exp           Int               @default(0)

  ballId        Int?              //the id of the ball item
  fatherId      Int?              //the id of the first owner

  stat          Stat?
  card          CardCatalog       @relation(fields: [cardId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  ball          Item?             @relation(fields: [ballId], references: [id])

  createdAt     DateTime          @default(now())

  @@unique([cardId, print])
}

model Stat {
  cardId        Int               @unique @id

  hp            Int               @default(-1)

  vit           Int
  pow           Int
  def           Int
  agi           Int
  spi           Int
  res           Int

  card          CardInstance      @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

enum ItemType {
  BALL
  ENCOUNTER
  CONSUMABLE
}

model Item {
  id            Int               @unique @id @default(autoincrement())
  name          String
  description   String?
  type          ItemType
  emoji         String?
  usable        Boolean           @default(false)
  properties    Json?

  priceCoin     Int?
  priceGem      Int?
  discount      Float?

  inventories   Inventory[]
  cards         CardInstance[]
}

model Inventory {
  itemId        Int
  userId        Int

  count         Int               @default(1)

  item          Item              @relation(fields: [itemId], references: [id])
  user          User              @relation(fields: [userId], references: [id])

  @@id([itemId, userId])
}

model Voucher {
  id            Int               @unique @id @default(autoincrement())
  userId        Int
  skuId         String
  consumed      Boolean           @default(false)
  createdAt     DateTime          @default(now())

  user          User              @relation(fields: [userId], references: [id])
}